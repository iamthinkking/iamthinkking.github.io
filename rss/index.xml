<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Christopher Lee Murray]]></title><description><![CDATA[~/think/interlink/ink/_]]></description><link>https://iamthinkking.github.io</link><image><url>http://thinkking.gitlab.io/img/profile.png</url><title>Christopher Lee Murray</title><link>https://iamthinkking.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Sat, 21 Jan 2017 19:17:23 GMT</lastBuildDate><atom:link href="https://iamthinkking.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[DevOps: Server SSH]]></title><description><![CDATA[<div class="sect1">
<h2 id="_the_problem">The Problem</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Generally, it is good to practise systems administration skills especially when persuing a career in linux. Today I set out to install a two virtual machines(VM) (ubuntu server 16.10 and fedora server 25), then install on open ERP on them both. The ERP chosen is <a href="https://www.odoo.com/">Odoo</a>. I am using GNOME Boxes as it is simple enough to spin up a VM quickly. Also, GNOME Boxes uses KVM, as the hypervisor, and QMENU, as the machine emulator.
Unfortunately copying and pasting strings into GNOME Boxes&#8217;s emulator just wasn&#8217;t happening. So, I opted to ssh into the servers instead.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_solution">The Solution</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To SSH into a server, you want to be able to do it as securely as possible, why else would you be using a Secure Socket Shell to interface anything? So both ends of the communication channel need to have a key to state that, indeed, they are who they claim to be. It&#8217;s like entering a secret club but having to say a special phrase first. Both you and the individual behind the door need to know the passphrase. So here&#8217;s how to do that:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Generate an RSA key pair by typing the following at a shell prompt:</p>
<div class="literalblock">
<div class="content">
<pre>~]$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/john/.ssh/id_rsa):</pre>
</div>
</div>
</li>
<li>
<p>Press Enter to confirm the default location (that is, ~/.ssh/id_rsa) for the newly created key.
Enter a passphrase, and confirm it by entering it again when prompted to do so. For security reasons, avoid using the same password as you use to log in to your account.
After this, you will be presented with a message similar to this:</p>
<div class="literalblock">
<div class="content">
<pre>Your identification has been saved in /home/john/.ssh/id_rsa.
Your public key has been saved in /home/john/.ssh/id_rsa.pub.
The key fingerprint is:
e7:97:c7:e2:0e:f9:0e:fc:c4:d7:cb:e5:31:11:92:14 john@penguin.example.com
The key's randomart image is:
+--[ RSA 2048]----+
|             E.  |
|            . .  |
|             o . |
|              . .|
|        S .    . |
|         + o o ..|
|          * * +oo|
|           O +..=|
|           o*  o.|
+-----------------+</pre>
</div>
</div>
</li>
<li>
<p>Change the permissions of the ~/.ssh/ directory:
<code>`
~]$ chmod 755 ~/.ssh
</code>`</p>
</li>
<li>
<p>Copy the content of ~/.ssh/id_rsa.pub into the ~/.ssh/authorized_keys on the machine to which you want to connect, appending it to its end if the file already exists.</p>
</li>
<li>
<p>Change the permissions of the ~/.ssh/authorized_keys file using the following command:
<code>`
~]$ chmod 644 ~/.ssh/authorized_keys
</code>`</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Now that we have generated and shared our SSH key, we will need to install <code>openssh-server</code> on our local machine so port 22 will be opened for us to us as our tunnel of communication.</p>
</div>
<div class="paragraph">
<p><strong>NB: This <code>dnf</code> is for fedora, use <code>apt-get</code> if you&#8217;re on ubuntu:</strong></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Installing openSSH Server:</p>
<div class="literalblock">
<div class="content">
<pre>dnf install openssh-server</pre>
</div>
</div>
</li>
<li>
<p>Check to ensure port 22 is opened</p>
<div class="literalblock">
<div class="content">
<pre>netstat -ant | grep 22</pre>
</div>
</div>
</li>
<li>
<p>Time to SSH into our server:</p>
<div class="literalblock">
<div class="content">
<pre>ssh -p 22 [username]@[ip_address]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>Now we have successfully SSH&#8217;d into our server @smileðŸ˜ƒ</p>
</div>
<hr>
<div class="ulist footer">
<ul class="footer">
<li>
<p>This has been tested on fedora 25, using GNOME Boxes, and terminix. There shouldn&#8217;t be any great differences on other platforms/environments.</p>
</li>
<li>
<p>I will do a post about Odoo very soon.</p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://iamthinkking.github.io/2017/01/21/Dev-Ops-Server-SSH.html</link><guid isPermaLink="true">https://iamthinkking.github.io/2017/01/21/Dev-Ops-Server-SSH.html</guid><category><![CDATA[fedora]]></category><category><![CDATA[ linux]]></category><category><![CDATA[ sysadmin]]></category><category><![CDATA[ administrator]]></category><category><![CDATA[ devops]]></category><category><![CDATA[ ssh]]></category><category><![CDATA[ secure]]></category><category><![CDATA[ systemadministrator]]></category><dc:creator><![CDATA[Christopher Lee Murray]]></dc:creator><pubDate>Sat, 21 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[DevOps: Server SSH]]></title><description><![CDATA[<div class="sect1">
<h2 id="_the_problem">The Problem</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Generally, it is  good to practise systems administration skills especially when persuing a career in linux. Today I set out to install a two virtual machines(VM) (ubuntu server 16.10 and fedora server 25), then install on open ERP on them both. The ERP chosen is <a href="https://www.odoo.com/">Odoo</a>. I am using GNOME Boxes as it is simple enough to spin up a VM quickly. Also, GNOME Boxes uses KVM, as the hypervisor, and QMENU, as the machine emulator.
Unfortunately copying and pasting strings into GNOME Boxes&#8217;s emulator just wasn&#8217;t happening. So, I opted to ssh into the servers instead.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_solution">The Solution</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To SSH into a server, you want to be able to do it as securely as possible, why else would you be using a Secure Socket Shell to interface anything? So both ends of the communication channel need to have a key to state that, indeed, they are who they claim to be. It&#8217;s like entering a secret club but having to say a special phrase first. Both you and the individual behind the door need to know the passphrase. So here&#8217;s how to do that:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Generate an RSA key pair by typing the following at a shell prompt:</p>
<div class="literalblock">
<div class="content">
<pre>~]$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/john/.ssh/id_rsa):</pre>
</div>
</div>
</li>
<li>
<p>Press Enter to confirm the default location (that is, ~/.ssh/id_rsa) for the newly created key.
Enter a passphrase, and confirm it by entering it again when prompted to do so. For security reasons, avoid using the same password as you use to log in to your account.
After this, you will be presented with a message similar to this:</p>
<div class="literalblock">
<div class="content">
<pre>Your identification has been saved in /home/john/.ssh/id_rsa.
Your public key has been saved in /home/john/.ssh/id_rsa.pub.
The key fingerprint is:
e7:97:c7:e2:0e:f9:0e:fc:c4:d7:cb:e5:31:11:92:14 john@penguin.example.com
The key's randomart image is:
+--[ RSA 2048]----+
|             E.  |
|            . .  |
|             o . |
|              . .|
|        S .    . |
|         + o o ..|
|          * * +oo|
|           O +..=|
|           o*  o.|
+-----------------+</pre>
</div>
</div>
</li>
<li>
<p>Change the permissions of the ~/.ssh/ directory:
<code>`
~]$ chmod 755 ~/.ssh
</code>`</p>
</li>
<li>
<p>Copy the content of ~/.ssh/id_rsa.pub into the ~/.ssh/authorized_keys on the machine to which you want to connect, appending it to its end if the file already exists.</p>
</li>
<li>
<p>Change the permissions of the ~/.ssh/authorized_keys file using the following command:
<code>`
~]$ chmod 644 ~/.ssh/authorized_keys
</code>`</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Now that we have generated and shared our SSH key, we will need to install <code>openssh-server</code> on our local machine so port 22 will be opened for us to us as our tunnel of communication.</p>
</div>
<div class="paragraph">
<p><strong>NB: This <code>dnf</code> is for fedora, use <code>apt-get</code> if you&#8217;re on ubuntu:</strong></p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Installing openSSH Server:</p>
<div class="literalblock">
<div class="content">
<pre>dnf install openssh-server</pre>
</div>
</div>
</li>
<li>
<p>Check to ensure port 22 is opened</p>
<div class="literalblock">
<div class="content">
<pre>netstat -ant | grep 22</pre>
</div>
</div>
</li>
<li>
<p>Time to SSH into our server:</p>
<div class="literalblock">
<div class="content">
<pre>ssh -p 22 [username]@[ip_address]</pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>Now we have successfully SSH&#8217;d into our server @smileðŸ˜ƒ</p>
</div>
<hr>
<div class="ulist footer">
<ul class="footer">
<li>
<p>This has been tested on fedora 25, using GNOME Boxes, and terminix. There shouldn&#8217;t be any great differences on other platforms/environments.</p>
</li>
<li>
<p>I will do a post about Odoo very soon.</p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://iamthinkking.github.io/2017/01/10/Dev-Ops-Server-SSH.html</link><guid isPermaLink="true">https://iamthinkking.github.io/2017/01/10/Dev-Ops-Server-SSH.html</guid><category><![CDATA[fedora]]></category><category><![CDATA[ linux]]></category><category><![CDATA[ sysadmin]]></category><category><![CDATA[ administrator]]></category><category><![CDATA[ devops]]></category><category><![CDATA[ ssh]]></category><category><![CDATA[ secure]]></category><category><![CDATA[ systemadministrator]]></category><dc:creator><![CDATA[Christopher Lee Murray]]></dc:creator><pubDate>Tue, 10 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Terminal: WiFi Password]]></title><description><![CDATA[<div class="paragraph">
<p>As a budding Linux Engineer I have found that the command line is often a very useful tool. You can get information faster and with greater detail. Often times for the information needed, there is no app with a GUI to provide it. Knowing a decent amount of commands, improves performance and efficiency by a great deal.</p>
</div>
<div class="paragraph">
<p>One particular example of this is my constant need to retrieve the WiFi passwords of the networks I have already connected to. Of course, storing them in a file is a good way to keep them, but it is also a redundant method, due to linux systems already storing them in files.</p>
</div>
<div class="paragraph">
<p>I have utilized the command line to get the desired output. However, it would be time consuming and strenuous to be typing a lengthy command multiple times per day, even if I were to press â¬† to travel through my terminal&#8217;s history or do <code>history | grep [name of word in command here]</code> to filter the list of recently entered commands. A beautiful solution to this is simply to use the <code>alias</code> command to store frequently used commands and comand combinations. Below is the result of my contemplations. I will explain them after. It is worth mentioning that the directories/paths we are accessing requires <strong>superuser</strong> privileges, so tread carefully.</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">wifipass, on fedora25</div>
<div class="content">
<pre class="highlight"><code>alias wifipass="{(sudo ls \
/etc/sysconfig/network-scripts/ \
| grep 'keys-') &amp;&amp; \
(sudo cat /etc/sysconfig/network-scripts/keys-*)} \
| pr --column 2 -Tt"</code></pre>
</div>
</div>
<div class="paragraph">
<p>In Fedora, the network passwords (PSK or Pre-Shared Key) is stored in separate files for each network. However, the network name (SSID, or Service Set IDentifier) is within the filename itself, prefixed by <code>keys-</code>. The first part of the command (<code>sudo ls /etc/sysconfig/network-scripts/ | grep 'keys-')</code>) is to retrieve the existing SSIDs, the second part of the script (<code>sudo cat /etc/sysconfig/network-scripts/keys-*</code>) is to retrieve the PSKs of each network. As the directory tree is traversed the order will remain consistent, therefore the order the SSIDs are returned is the same order the PSKs will be returned.</p>
</div>
<div class="paragraph">
<p><strong>Optional</strong>: However, the SSIDs will be listed first then the PSKs. Because of this we use <code>pr</code> to format the text into 2 columns. The <code>2</code> is the number of columns and the <code>-Tt</code> are the two options passed which omit pagination and omit the header respectively.</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">wifipass, on ubuntu16.10</div>
<div class="content">
<pre class="highlight"><code>alias wifipass="sudo cat \
/etc/NetworkManager/system-connections/* \
| grep -e ssid -e psk"</code></pre>
</div>
</div>
<div class="paragraph">
<p>In Ubuntu, all network configuration is stored inside separate files but the SSIDs are in the respective files, along with the PSKs. This allows us to retrieve what we need with a bit less hassle. Therefore, the command retrieves all the text in each file then filters for lines containing only <code>ssisd</code> and <code>psk</code>.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Often times the information needed, there is no app with a GUI to provide it.</p>
</div>
</blockquote>
<div class="attribution">
&#8212; Christopher Lee Murray
</div>
</div>
<div class="paragraph">
<p>NB:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>|</code> is used to "pipe" output. This allows you to move the stream of an output and use it as as input stream.</p>
</li>
<li>
<p><code>alias</code> is used to store commands that you often use to make your CLI life easier.</p>
</li>
<li>
<p><code>*</code> is the "wildcard" symbol which I will speak on more in a REGEX post later.</p>
</li>
<li>
<p>Should you need to store these commands permanently (to used them after every boot) then you would need to store them in your <code>~/.bashrc</code> or your <code>~/.zhrc</code> file depending on your shell/</p>
</li>
</ul>
</div>]]></description><link>https://iamthinkking.github.io/2016/12/23/Terminal-WiFi-Password.html</link><guid isPermaLink="true">https://iamthinkking.github.io/2016/12/23/Terminal-WiFi-Password.html</guid><category><![CDATA[fedora]]></category><category><![CDATA[ ubuntu]]></category><category><![CDATA[ linux]]></category><category><![CDATA[ wifi]]></category><category><![CDATA[ password]]></category><category><![CDATA[ alias]]></category><category><![CDATA[ cli]]></category><category><![CDATA[ terminal]]></category><dc:creator><![CDATA[Christopher Lee Murray]]></dc:creator><pubDate>Fri, 23 Dec 2016 00:00:00 GMT</pubDate></item></channel></rss>